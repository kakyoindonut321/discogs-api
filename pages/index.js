import Head from "next/head";
import Mountain from "../components/decorations/Mountain";
import Search from "../components/Search";
import Result from "../components/Result";
import Loading from "../components/decorations/Loading";
// import Image from 'next/image'
// import { Inter } from 'next/font/google'
import styles from "@/styles/Home.module.css";
import { API_CODE } from "../key.js";
import { useEffect, useState } from "react";
import axios from "axios";
import Modal from "../components/Modal";

export default function Home() {
  const [resulting, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [errorMe, setErrorMe] = useState(null);
  const [modalResult, setModalResult] = useState(null);
  const [requestType, setRequestType] = useState("");

  // GET DATA FROM API, SPAWN THE RESULT COMPONENT WHEN THE DATA HAS LOADED
  const fetchData = async (queryInput, e) => {
    e.preventDefault();
    // if(queryInput == '') {
    //   return 
    // }
    const url = `https://api.discogs.com/database/search?q=${queryInput}&key=${API_CODE.key}&secret=${API_CODE.secret}`;
    setResult(null);
    setLoading(true);
    let data = await axios.get(url);
    setLoading(false);
    setResult(data);
  };

  // GET DATA FROM THE DETAILS IN API
  const fetchDetails = async (url, type) => {
    url += `?key=${API_CODE.key}&secret=${API_CODE.secret}`;
    console.log(url);
    const data = [await axios.get(url), type];
    setModalResult(data);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.titleScreen}>
          Discogs API <br /> Search your favorite band, album, or song here
        </h1>
        {/* <p className={styles.titleDisclaimer}>no it's discogs not discord</p> */}
        <Search onSearch={fetchData}></Search>
        {loading && <Loading />}
        {resulting && <Result queries={resulting} onChoosed={fetchDetails} />}
      </main>
      <Mountain></Mountain>
      <p className={styles.watermark}>Kakyoindonut321</p>
      {modalResult && (
        <Modal data={modalResult} onClose={() => setModalResult(null)} />
      )}
    </>
  );
}
